import ElasticWrapper from '../lib/elastic-wrapper';

export default class VulnerabilityRequest {
    constructor(server) {
        this.wzWrapper = new ElasticWrapper(server);
    }

    async topCveCount(gte, lte, severity, filters) {
        try {
            const base = {
                "size": 0,
                "_source": {
                    "excludes": []
                },
                "aggs": {
                    "2": {
                        "terms": {
                            "field": "agent.id",
                            "size": 3,
                            "order": {
                                "1": "desc"
                            }
                        },
                        "aggs": {
                            "1": {
                                "cardinality": {
                                    "field": "data.vulnerability.cve"
                                }
                            },
                            "3": {
                                "terms": {
                                    "field": "data.vulnerability.severity",
                                    "size": 5,
                                    "order": {
                                        "1": "desc"
                                    }
                                },
                                "aggs": {
                                    "1": {
                                        "cardinality": {
                                            "field": "data.vulnerability.cve"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "stored_fields": [
                    "*"
                ],
                "script_fields": {},
                "docvalue_fields": [
                    "@timestamp",
                    "data.vulnerability.published",
                    "data.vulnerability.updated",
                    "syscheck.mtime_after",
                    "syscheck.mtime_before",
                    "data.cis.timestamp"
                ],
                "query": {
                    "bool": {
                        "must": [
                            {
                                "query_string": {
                                    "query": filters + " AND data.vulnerability.severity: " + severity,
                                    "analyze_wildcard": true,
                                    "default_field": "*"
                                }
                            },
                            {
                                "range": {
                                    "@timestamp": {
                                        "gte": gte,
                                        "lte": lte,
                                        "format": "epoch_millis"
                                    }
                                }
                            }
                        ],
                        "filter": [],
                        "should": [],
                        "must_not": []
                    }
                }
            };
            const response = await this.wzWrapper.searchWazuhAlertsWithPayload(base);
            const aggArray = response.aggregations['2'].buckets;
            const result = [];
            for (const bucket of aggArray) {
                const agent = {};
                agent.id = bucket.key;
                agent.count = bucket['3'].buckets[0]['1'].value;
                result.push(agent);
            }

            return result;

        } catch (error) {
            return Promise.reject(error);
        }
    }

    async uniqueSeverityCount(gte, lte, severity, filters) {
        try {
            const base = {
                "size": 0,
                "_source": {
                    "excludes": []
                },
                "aggs": {
                    "1": {
                        "cardinality": {
                            "field": "agent.id"
                        }
                    }
                },
                "stored_fields": [
                    "*"
                ],
                "script_fields": {},
                "docvalue_fields": [
                    "@timestamp",
                    "data.vulnerability.published",
                    "data.vulnerability.updated",
                    "syscheck.mtime_after",
                    "syscheck.mtime_before",
                    "data.cis.timestamp"
                ],
                "query": {
                    "bool": {
                        "must": [
                            {
                                "query_string": {
                                    "query": filters + " AND data.vulnerability.severity: " + severity,
                                    "analyze_wildcard": true,
                                    "default_field": "*"
                                }
                            },
                            {
                                "range": {
                                    "@timestamp": {
                                        "gte": gte,
                                        "lte": lte,
                                        "format": "epoch_millis"
                                    }
                                }
                            }
                        ],
                        "filter": [],
                        "should": [],
                        "must_not": []
                    }
                }
            };
            const response = await this.wzWrapper.searchWazuhAlertsWithPayload(base);
            //aggregations: { '1': { value: 2 } } }
            return response &&
                response.aggregations &&
                response.aggregations['1'] &&
                response.aggregations['1'].value ?
                response.aggregations['1'].value :
                0;
        } catch (error) {
            return Promise.reject(error);
        }
    }
}