// Require utils
var kwu = require('plugins/wazuh/utils/kibanaWazuhUtils.js');
var kuf = require('plugins/wazuh/utils/kibanaUrlFormatter.js');
// Require config
var config = require('plugins/wazuh/config/config.js');
require('ui/notify');
var app = require('ui/modules').get('app/wazuh', [
    'elasticsearch',
    'ngRoute',
    'kibana/courier',
    'kibana/config',
    'kibana/notify',
    'kibana/typeahead'
]);

app.controller('agentsController', function ($scope, $http, Notifier, $route, $q, alertify, $interval, sharedProperties, $location, apiCall, $sce) {
    $scope.load = true;
    // Load settings
    kwu.getApiCredentials($q, $http).then(function (data) {
        var authdata = data[0];
        var api_url = data[1];
        const notify = new Notifier({
            location: 'Wazuh'
        });

        $scope.fetchAgentsList = function () {
            var defered = $q.defer();
            var promise = defered.promise;

            apiCall.getApiCall(api_url, '/agents', authdata, $q, $http)
                .then(function (data) {
                    $scope.agents = data.data;
                    $scope.agentFetchInfo = [];
                    $scope.tab = [];
                    defered.resolve(1);
                }, function (data) {
                    $scope.agents = [];
                    $scope.message = $sce.trustAsHtml(apiCall.errorControl(data));
                    defered.resolve(0);
                });
            return promise;
        };

        $scope.fetchAgentsList().then(function (data) {
            $scope.sortKey = 'id';
            $scope.reverse = false;
            $scope.load = false;
        });

        $interval(function () { $scope.fetchAgentsList() }, 610000);

        $scope.getAgentStatusClass = function (agentStatus) {
            if (agentStatus == "Active")
                return "green"
            else if (agentStatus == "Disconnected")
                return "red";
            else
                return "red";
        };

        $scope.fetchAgent = function ($agent, $index) {

            apiCall.getApiCall(api_url, '/agents/' + $agent.id, authdata, $q, $http)
                .then(function (data) {
                    $scope.agentFetchInfo[$agent.id] = data.data;
                    $scope.getKey($agent, $index);
                }, function (data) {
                    $scope.message = $sce.trustAsHtml(apiCall.errorControl(data));
                });
        };

        $scope.getKey = function ($agent, $index) {
            if ($agent.id == '000') {
                $scope.agentFetchInfo[$agent.id].key = 'No key for agent 000';
            } else {
                apiCall.getApiCall(api_url, '/agents/' + $agent.id + '/key', authdata, $q, $http)
                    .then(function (data) {
                        $scope.agentFetchInfo[$agent.id].key = data.data;
                    }, function (data) {
                        $scope.message = $sce.trustAsHtml(apiCall.errorControl(data));
                        $scope.agentFetchInfo[$agent.id].key = '';
                    });
            }
        };

        $scope.restart = function ($agent) {
            alertify.delay(5000).closeLogOnClick(true).log('Restarting agent...');
            apiCall.putApiCall(api_url, '/agents/' + $agent.id + '/restart', {}, authdata, $q, $http)
                .then(function (data) {
                    alertify.delay(10000).closeLogOnClick(true).success('Agent restarted successfully');
                }, function (data) {
                    $scope.message = $sce.trustAsHtml(apiCall.errorControl(data));
                    alertify.delay(10000).closeLogOnClick(true).error('Error restarting agent');
                });
        };

        $scope.delete = function ($agent) {
            alertify.confirm("Are you sure you want to delete the agent with ID " + $agent.id + "?", function () {
                apiCall.deleteApiCall(api_url, '/agents/' + $agent.id, authdata, $q, $http)
                    .then(function (data) {
                        $route.reload();
                        notify.info('Agent deleted successfully');
                    }, function (data) {
                        $scope.message = $sce.trustAsHtml(apiCall.errorControl(data));
                        notify.error('Error deleting agent');
                    });
            }, function () {
                //Do nothing
            });
        };

        $scope.copyAgentKey = function ($index) {
            var copyTextarea = document.querySelectorAll('.js-copytextarea')[$index];
            copyTextarea.select();
            try {
                var successful = document.execCommand('copy');
                alertify.delay(10000).closeLogOnClick(true).success('Key copied successfully');
            } catch (err) {
                alertify.delay(10000).closeLogOnClick(true).error('Error: Copy button in this browser is not supported. Please, press Ctrl+C to copy');
            }
        }

        $scope.runSyscheck = function ($agent) {
            alertify.delay(5000).closeLogOnClick(true).log('Restarting syscheck and rootcheck...');
            apiCall.putApiCall(api_url, '/syscheck/' + $agent.id, {}, authdata, $q, $http)
                .then(function (data) {
                    alertify.delay(10000).closeLogOnClick(true).success('Syscheck and rootcheck restarted successfully');
                }, function (data) {
                    $scope.message = $sce.trustAsHtml(apiCall.errorControl(data));
                    alertify.delay(10000).closeLogOnClick(true).error('Error restarting syscheck/rootcheck on agent');
                });
        }

        $scope.deleteSyscheck = function ($agent) {
            alertify.confirm("Are you sure you want to clear FIM database in agent with ID " + $agent.id + "?", function () {
                apiCall.deleteApiCall(api_url, '/syscheck/' + $agent.id, authdata, $q, $http)
                    .then(function (data) {
                        alertify.delay(10000).closeLogOnClick(true).success('Syscheck database deleted successfully');
                    }, function (data) {
                        $scope.message = $sce.trustAsHtml(apiCall.errorControl(data));
                        alertify.delay(10000).closeLogOnClick(true).error('Error deleting syscheck database');
                    });
            }, function () {
                //Do nothing
            });
        };

        $scope.deleteRootcheck = function ($agent) {
            alertify.confirm("Are you sure you want to clear rootcheck database in agent with ID " + $agent.id + "?", function () {
                apiCall.deleteApiCall(api_url, '/rootcheck/' + $agent.id, authdata, $q, $http)
                    .then(function (data) {
                        alertify.delay(10000).closeLogOnClick(true).success('Rootcheck database deleted successfully');
                    }, function (data) {
                        $scope.message = $sce.trustAsHtml(apiCall.errorControl(data));
                        alertify.delay(10000).closeLogOnClick(true).error('Error deleting rootcheck database');
                    });
            }, function () {
                //Do nothing
            });
        };

        $scope.addAgent = function () {
            if ($scope.newName == undefined) {
                notify.error('Error adding agent: Specify an agent name');
            }
            else if ($scope.newIp == undefined) {
                notify.error('Error adding agent: Specify an IP address');
            }
            else {
                apiCall.postApiCall(api_url, '/agents', {
                    name: $scope.newName,
                    ip: $scope.newIp
                }, authdata, $q, $http)
                    .then(function (data) {
                        $route.reload();
                        notify.info('Agent added successfully');
                    }, function (data) {
                        $scope.message = $sce.trustAsHtml(apiCall.errorControl(data));
                        notify.error('Error adding agent: ' + data.message);
                    });
            }
        };

        $scope.sort = function (keyname) {
            $scope.sortKey = keyname;
            $scope.reverse = !$scope.reverse;
        }

        $scope.loadRootcheck = function (agentId) {
            sharedProperties.setAgentId(agentId);
            $location.path('/rootcheck');
        }

        $scope.loadFIM = function (agentId) {
            sharedProperties.setAgentId(agentId);
            $location.path('/FIM');
        }

        $scope.filter = function (status) {
            if (status === $scope.statusFilter) {
                $scope.statusFilter = '';
            }
            else {
                $scope.statusFilter = status;
            }
        }

        $scope.getAlertsUrl = function (agent, time, filters) {
            if (!time) {
                time = '-24h';
            }
            else if (time == '') {
                time = '-24h';
            }
            if (!filters) {
                filters = '';
                var kibanaFilter = 'AgentName:' + agent;
            } else if (filters == '') {
                var kibanaFilter = 'AgentName:' + agent;
            } else {
                var kibanaFilter = 'AgentName:' + agent + ' AND ' + filters;
            }
            var kibanaTime = 'from:now' + time + ',mode:quick,to:now';
            var rulesUrl = kuf.getAlerts('ossec-*', kibanaFilter, kibanaTime);
            return rulesUrl;
        }

        $scope.getDashboardUrl = function (agent, dashboard, time, filters) {
            if (!time) {
                time = '-24h';
            }
            else if (time == '') {
                time = '-24h';
            }
            if (!filters) {
                filters = '';
                var kibanaFilter = 'AgentName:' + agent;
            } else if (filters == '') {
                var kibanaFilter = 'AgentName:' + agent;
            } else {
                var kibanaFilter = 'AgentName:' + agent + ' AND ' + filters;
            }
            var kibanaTime = 'from:now' + time + ',mode:quick,to:now';
            var rulesUrl = kuf.getDashboard(dashboard, kibanaFilter, kibanaTime, true);
            return rulesUrl;
        }

        // Tabs

        $scope.setTab = function (newTab, index) {
            $scope.tab[index] = newTab;
        };

        $scope.isSet = function (tabNum, index) {
            return $scope.tab[index] === tabNum;
        };

    }, function (data) {
        $scope.message = $sce.trustAsHtml('Could not get the API credentials. Is elasticsearch working?');
    })
});

